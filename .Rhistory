install.packages("pathfindR")
library(pathfindR)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("REMP")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("REMP")
library(REMP)
detach("package:REMP", unload = TRUE)
setwd("C:/Users/GCVillalba/Downloads")
dMMR <- read.csv("C:/Users/crist/Downloads/dMMR.csv", sep="")
View(dMMR)
CCLE_expression <- read.csv("C:/Users/crist/Downloads/CCLE_expression.csv", header=FALSE)
View(CCLE_expression)
View(dMMR)
View(CCLE_expression)
CCLE_expression <- read.csv("C:/Users/crist/Downloads/CCLE_expression.csv")
View(CCLE_expression)
# to transpose the gene expression table from CCLE
df2<- as.data.frame(t(CCLE_expression))
View(df2)
View(df2)
View(df2)
View(dMMR)
# To macth the collumns
geneexpressiondMMR <- merge(dMMR, CCLE_expression,
by.x = "ï..Gene", by.y = "X" )
View(geneexpressiondMMR)
# To macth the collumns
geneexpressiondMMR <- merge(CCLE_expression, dMMR,
by.x = "X", by.y = "ï..Gene" )
View(geneexpressiondMMR)
View(df2)
write.csv(df2, "geneexpressiondMMR.csv")
getwd()
library(shiny); runApp('C:/Users/crist/Downloads/databasetest/code.R')
install.packages("shiny")
install.packages("DBI")
install.packages("RSQLite")
library(shiny)
library(DBI)
library(htmltools)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "sample.db")
dbExecute(con, "CREATE TABLE IF NOT EXISTS sample (id INTEGER PRIMARY KEY, dataset_name TEXT, specie TEXT, age TEXT, gender TEXT, donor TEXT, tissue TEXT, platform TEXT, library_type TEXT, refgenome TEXT, numreads INTEGER, numcells INTEGER, path_taco TEXT)")
con <- dbConnect(RSQLite::SQLite(), "sample.db")
dbExecute(con, "CREATE TABLE IF NOT EXISTS sample (id INTEGER PRIMARY KEY, dataset_name TEXT, specie TEXT, age TEXT, gender TEXT, donor TEXT, tissue TEXT, platform TEXT, library_type TEXT, refgenome TEXT, numreads INTEGER, numcells INTEGER, path_taco TEXT)")
dbExecute(con, "INSERT INTO sample (dataset_name, specie, age, gender, donor, tissue, platform, library_type, refgenome, numreads, numcells, path_taco) VALUES ('GSE197289', 'Mus musculus', '8 weeks', 'UT Dallas', 'trigeminal', '10x visium', '3v3', 'mm10', '4548422', '24587', '/storage/chen/data_shared_folder/trigeminal')")
ui <- fluidPage(
titlePanel("Sample Database"),
dataTableOutput("table")
)
server <- function(input, output) {
output$table <- renderDataTable({
dbGetQuery(con, "SELECT * FROM sample")
})
}
con <- dbConnect(RSQLite::SQLite(), "sample.db")
dbExecute(con, "CREATE TABLE IF NOT EXISTS sample (id INTEGER PRIMARY KEY, specie TEXT, age TEXT, gender TEXT, donor TEXT, tissue TEXT, platform TEXT, library_type TEXT, refgenome TEXT, numreads INTEGER, numcells INTEGER, path_taco TEXT)")
dbExecute(con, "INSERT INTO sample (specie, age, gender, donor, tissue, platform, library_type, refgenome, numreads, numcells, path_taco) VALUES ('Mus musculus', '8 weeks', 'UT Dallas', 'trigeminal', '10x visium', '3v3', 'mm10', '4548422', '24587', '/storage/chen/data_shared_folder/trigeminal')")
ui <- fluidPage(
titlePanel("Sample Database"),
dataTableOutput("table")
)
server <- function(input, output) {
output$table <- renderDataTable({
dbGetQuery(con, "SELECT * FROM sample")
})
}
shinyApp(ui, server)
con <- dbConnect(RSQLite::SQLite(), "testsample.db")
dbExecute(con, "CREATE TABLE IF NOT EXISTS testsample (id INTEGER PRIMARY KEY, specie TEXT, age TEXT, gender TEXT, donor TEXT, tissue TEXT, platform TEXT, library_type TEXT, refgenome TEXT, numreads INTEGER, numcells INTEGER, path_taco TEXT)")
dbExecute(con, "INSERT INTO testsample (specie, age, gender, donor, tissue, platform, library_type, refgenome, numreads, numcells, path_taco) VALUES ('Mus musculus', '8 weeks', 'UT Dallas', 'trigeminal', '10x visium', '3v3', 'mm10', '4548422', '24587', '/storage/chen/data_shared_folder/trigeminal')")
ui <- fluidPage(
titlePanel("Sample Database"),
dataTableOutput("table")
)
server <- function(input, output) {
output$table <- renderDataTable({
dbGetQuery(con, "SELECT * FROM testsample")
})
}
shinyApp(ui, server)
con <- dbConnect(RSQLite::SQLite(), "testsample.db")
dbExecute(con, "CREATE TABLE IF NOT EXISTS testsample (id INTEGER PRIMARY KEY, specie TEXT, age TEXT, gender TEXT, donor TEXT, tissue TEXT, platform TEXT, library_type TEXT, refgenome TEXT, numreads INTEGER, numcells INTEGER, path_taco TEXT)")
dbExecute(con, "INSERT INTO testsample (specie, age, gender, donor, tissue, platform, library_type, refgenome, numreads, numcells, path_taco) VALUES ('Mus musculus', '8 weeks', 'mixed', 'UT Dallas', 'trigeminal', '10x visium', '3v3', 'mm10', '4548422', '24587', '/storage/chen/data_shared_folder/trigeminal')")
ui <- fluidPage(
titlePanel("Sample Database"),
dataTableOutput("table")
)
server <- function(input, output) {
output$table <- renderDataTable({
dbGetQuery(con, "SELECT * FROM testsample")
})
}
shinyApp(ui, server)
setwd("C:/Users/crist/Downloads/databasetest")
runApp('code.R')
install.packages("shiny")
install.packages("DBI")
install.packages("RSQLite")
runApp('code.R')
install.packages("shiny")
runApp('code.R')
install.packages("shiny")
install.packages("DBI")
install.packages("RSQLite")
con <- dbConnect(RSQLite::SQLite(), "testsample.db")
dbExecute(con, "CREATE TABLE IF NOT EXISTS testsample (id INTEGER PRIMARY KEY, specie TEXT, age TEXT, gender TEXT, donor TEXT, tissue TEXT, platform TEXT, library_type TEXT, refgenome TEXT, numreads INTEGER, numcells INTEGER, path_taco TEXT)")
dbExecute(con, "INSERT INTO testsample (specie, age, gender, donor, tissue, platform, library_type, refgenome, numreads, numcells, path_taco) VALUES ('Mus musculus', '8 weeks', 'mixed', 'UT Dallas', 'trigeminal', '10x visium', '3v3', 'mm10', '4548422', '24587', '/storage/chen/data_shared_folder/trigeminal')")
ui <- fluidPage(
titlePanel("Sample Database"),
dataTableOutput("table")
)
server <- function(input, output) {
output$table <- renderDataTable({
dbGetQuery(con, "SELECT * FROM testsample")
})
}
shinyApp(ui, server)
